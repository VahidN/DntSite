/**
 * Minified by jsDelivr using Terser v5.37.0.
 * Original file: /npm/quill@2.0.3/modules/tableEmbed.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import Delta,{OpIterator}from"quill-delta";import Module from"../core/module.js";const parseCellIdentity=e=>{const t=e.split(":");return[Number(t[0])-1,Number(t[1])-1]},stringifyCellIdentity=(e,t)=>`${e+1}:${t+1}`;export const composePosition=(e,t)=>{let l=t;const n=new OpIterator(e.ops);let s=0;for(;n.hasNext()&&s<=l;){const e=n.peekLength(),t=n.peekType();switch(n.next(),t){case"delete":if(e>l-s)return null;l-=e;break;case"insert":l+=e,s+=e;break;default:s+=e}}return l};const compactCellData=e=>{let{content:t,attributes:l}=e;const n={};return t.length()>0&&(n.content=t.ops),l&&Object.keys(l).length>0&&(n.attributes=l),Object.keys(n).length>0?n:null},compactTableData=e=>{let{rows:t,columns:l,cells:n}=e;const s={};return t.length()>0&&(s.rows=t.ops),l.length()>0&&(s.columns=l.ops),Object.keys(n).length&&(s.cells=n),s},reindexCellIdentities=(e,t)=>{let{rows:l,columns:n}=t;const s={};return Object.keys(e).forEach((t=>{let[o,c]=parseCellIdentity(t);if(o=composePosition(l,o),c=composePosition(n,c),null!==o&&null!==c){const l=stringifyCellIdentity(o,c);s[l]=e[t]}}),!1),s};export const tableHandler={compose(e,t,l){const n=new Delta(e.rows||[]).compose(new Delta(t.rows||[])),s=new Delta(e.columns||[]).compose(new Delta(t.columns||[])),o=reindexCellIdentities(e.cells||{},{rows:new Delta(t.rows||[]),columns:new Delta(t.columns||[])});return Object.keys(t.cells||{}).forEach((e=>{const n=o[e]||{},s=t.cells[e],c=new Delta(n.content||[]).compose(new Delta(s.content||[])),r=Delta.AttributeMap.compose(n.attributes,s.attributes,l),a=compactCellData({content:c,attributes:r});a?o[e]=a:delete o[e]})),compactTableData({rows:n,columns:s,cells:o})},transform(e,t,l){const n={rows:new Delta(e.rows||[]),columns:new Delta(e.columns||[])},s={rows:new Delta(t.rows||[]),columns:new Delta(t.columns||[])},o=n.rows.transform(s.rows,l),c=n.columns.transform(s.columns,l),r=reindexCellIdentities(t.cells||{},{rows:s.rows.transform(n.rows,!l),columns:s.columns.transform(n.columns,!l)});return Object.keys(e.cells||{}).forEach((t=>{let[n,s]=parseCellIdentity(t);if(n=composePosition(o,n),s=composePosition(c,s),null!==n&&null!==s){const o=stringifyCellIdentity(n,s),c=e.cells[t],a=r[o];if(a){const e=new Delta(c.content||[]).transform(new Delta(a.content||[]),l),t=Delta.AttributeMap.transform(c.attributes,a.attributes,l),n=compactCellData({content:e,attributes:t});n?r[o]=n:delete r[o]}}})),compactTableData({rows:o,columns:c,cells:r})},invert(e,t){const l=new Delta(e.rows||[]).invert(new Delta(t.rows||[])),n=new Delta(e.columns||[]).invert(new Delta(t.columns||[])),s=reindexCellIdentities(e.cells||{},{rows:l,columns:n});return Object.keys(s).forEach((e=>{const l=s[e]||{},n=(t.cells||{})[e]||{},o=new Delta(l.content||[]).invert(new Delta(n.content||[])),c=Delta.AttributeMap.invert(l.attributes,n.attributes),r=compactCellData({content:o,attributes:c});r?s[e]=r:delete s[e]})),Object.keys(t.cells||{}).forEach((l=>{const[n,o]=parseCellIdentity(l);null!==composePosition(new Delta(e.rows||[]),n)&&null!==composePosition(new Delta(e.columns||[]),o)||(s[l]=t.cells[l])})),compactTableData({rows:l,columns:n,cells:s})}};class TableEmbed extends Module{static register(){Delta.registerEmbed("table-embed",tableHandler)}}export default TableEmbed;
//# sourceMappingURL=/sm/891617e566c68674b6dec7c4f059acdf523268bfa3f467a02ce2fea7bdf56ee3.map