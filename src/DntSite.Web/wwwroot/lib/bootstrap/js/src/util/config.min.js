/**
 * Minified by jsDelivr using Terser v5.37.0.
 * Original file: /npm/bootstrap@5.3.3/js/src/util/config.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import Manipulator from"../dom/manipulator.js";import{isElement,toType}from"./index.js";class Config{static get Default(){return{}}static get DefaultType(){return{}}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}_getConfig(t){return t=this._mergeConfigObj(t),t=this._configAfterMerge(t),this._typeCheckConfig(t),t}_configAfterMerge(t){return t}_mergeConfigObj(t,e){const o=isElement(e)?Manipulator.getDataAttribute(e,"config"):{};return{...this.constructor.Default,..."object"==typeof o?o:{},...isElement(e)?Manipulator.getDataAttributes(e):{},..."object"==typeof t?t:{}}}_typeCheckConfig(t,e=this.constructor.DefaultType){for(const[o,r]of Object.entries(e)){const e=t[o],n=isElement(e)?"element":toType(e);if(!new RegExp(r).test(n))throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${o}" provided type "${n}" but expected type "${r}".`)}}}export default Config;
//# sourceMappingURL=/sm/6cbb5b0b0d3589a8688d9a6ff871d8d83fbc340aa9f192b668db53e27cf827aa.map